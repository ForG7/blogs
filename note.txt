blog:
    MongoDB数据库;
    db: 存储数据;
    models: 数据库目录文件;
    schemas: 数据库结构文件;
    node_modules: 安装包;
    views/tpl: 模板文件;
    routes: 路由文件;
        前端页面的请求:
            localhost:8086/news/list1.html
            localhost:8086/static/index.html

        后台也面的请求:
            localhost:8086/admin/reg.html
            localhost:8086/admin/login.html

    public: 公共文件
        images: 图片
        css: 样式
        js: js文件
        static: 生成的文件

    app.js: 项目启动文件; 项目入口文件; application: 应用;

如何得到package.json文件: npm init
    package.json: 工程简介, 包含当前项目的一些基本信息;

Express Express-static body-parser ejs

--save-dev:
    npm install
    node app

require(url):
    系统模块直接写名称;
    非系统模块写路径+名称;

静态资源:
    任何用户访问时看到的结果都一样;

路由划分:
    admin: 后台 localhost:8086/admin/login.html
    api: 逻辑: localhost:8086/api/user.js
    /: 前端

切换到mongodb安装的bin目录下执行:
    mongod --dbpath=F:/nodejs/blogs/db --port=27018

用户登录:

用户注册:
    users
        username: String
        password: String

tpl/main内放的都是前端的模板文件;
tpl/admin 放的都是网站后台的模板文件;

登录校验:
    前端的校验：
        先做正则匹配 正则匹配通过以后在发送ajax请求;
            正则表达式: /^(^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$)|(^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[Xx])$)$/

    后台的校验：
       拿到前端提交的数据, 再次做正则校验, 校验通过以后再去数据库查询并且进行数据库操作;

关联数据库:
    MongoDB: 数据库; 跟mysql作用一样，存储数据;

    mysql: slq语句;

    MongoDB: 使用mongoose.js来操作mongodb数据库进行增删改查操作.

    mongoose.js: promise:

    ajax({
        url: ,
        type: ,
    }).then(function(info){

    }).then();


保持登录状态:
    需要cookie;

try{
    尝试着做某一件事儿;
}catch(e){//失败的原因
    如果做不成功怎么办 console.log(e);
}


JSON.parse({}): 把字符串格式的json转成json;


用户信息展示:
    用户名 密码 id 是否是管理员

每页展示 4 条

user.find().limit(number).skip(number).then();

1: 1 - 5   skip: 0
2: 6 - 10  skip: 5
3: 11 - 15 skip: 10
 skip: (page - 1) * limit

分类添加:
    1. 分类名称不能为空;
    2. 新增分类不能重复;

-1: 降序
1: 升序
model.find().sort({_id: -1}).then();

分类修改：
    1. 名称不能为空;
    2. 修改后的名称不能和修改前的一样;
    3. 修改后的名称在数据库中不应该存在;

前端提交要修改的分类名称和分类id到后台, 后台需要拿到分类的id和新的分类名到数据库中进行查询, 根据id进行查询,
查询数据库中的id不等于提交的id, 名称等于提交的名称. 如果查询到了告诉用户分类名数据库中已经存在,否则修改成功!

新增文章:
    文章标题
    文章简介
    文章的内容
    文章所属分类

    标题, 简介, 内容, 所属分类, 都不能为空;


router.use()不管get或者post请求都会走use;

category.find().where(id).then();

---------------------------------------------------------------------
前端展示功能划分：
    登录:
        前端不做校验, 校验后台做的;

    注册：
        前端不做校验, 后台做;

    留言:
        游客模式不允许留言, 只可以查看留言.
        留言条数过多, 需要分页展示. 最新的留言需要在最上面.

    分类:
        点击分类跳转到对应页面。
        分类下文章过多, 需要分页展示.
        最新发表的文章需要在最上面展示.

API:
    Router.get('/index', index);//针对用户的访问;
    Router.get('/admin', admin);//针对管理员的后台访问;
    Router.get('/api', api);//前端和后台的逻辑交互;

后台功能划分:
    数据库: MongoDB
    操作数据库: mongoose.js操作数据库;
    数据库操作: 增删改查(CRUD)
    mongoose文档地址:
       EN: https://mongoosejs.com/docs/models.html
       CN: https://mongoose.shujuwajue.com/guide/schemas.html

    模板:
        ejs, swig, templates.js, mustache.js

    登录:
        用户名和密码不能为空, 带着数据到数据库中的对应的表中进行查询;
        表: users.

    注册:
        用户名, 密码, 重复密码, 带着数据到数据库中对应的表中进行查询, 查询是否有相同的用户名存在,并且返回对应的数据给前端.
        users: {
            username: String,
            password: String,
            mob: Number,
            times: Date(),
            sex: 'men',
            Add: String,
            isAdmin: { 管理员需要手动添加;
                default: 'false',
                type: Boolean
            }
        }

    分类:
        分类添加/删除/修改/查询
        category:{
            name: String,
        }

    文章列表：
        增/删/改/查
        article:{
            title: String,
            int:m String,
            con: String,
            times: Date(),
            views: Number,
            comments:{
                type: Array,
                default: []
            },
            category: _id;
        }